---
import '../styles/global.css';
import LoadingScreen from '../components/LoadingScreen.astro';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="/images/Kairos-url.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Kairos Prediction Game - Wallet Collection</title>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap" rel="stylesheet">
    <style>
      body {
        background-color: #1a2a6c; /* Light dark blue instead of #111827 */
        color: #ffffff;
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 1rem;
        position: relative;
        overflow: hidden;
        font-family: 'Press Start 2P', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        margin: 0;
      }
      
      .background-elements {
        position: absolute;
        inset: 0;
        overflow: hidden;
        pointer-events: none;
        z-index: 1;
      }
      
      .star {
        position: absolute;
        border-radius: 9999px;
        background-color: #ffffff;
        animation: twinkle 2s infinite ease-in-out;
      }
      
      /* Pulsating planet element */
      .planet {
        position: absolute;
        border-radius: 50%;
        background: radial-gradient(circle at 30% 30%, #60a5fa, #4f46e5);
        box-shadow: 0 0 30px #60a5fa, 0 0 60px #4f46e5;
        animation: pulse 3s infinite ease-in-out;
      }
      
      /* Fireball styles */
      .fireball {
        position: absolute;
        border-radius: 50%;
        background: radial-gradient(circle at 30% 30%, #f97316, #ea580c);
        box-shadow: 0 0 20px #f97316, 0 0 40px #ea580c;
        animation: fireballMove 20s infinite linear;
        z-index: 2;
        /* Contain within viewport */
        max-width: calc(100vw - 100px);
        max-height: calc(100vh - 100px);
      }
      
      .container {
        position: relative;
        z-index: 10;
        width: 100%;
        max-width: 32rem;
        margin: 1rem auto;
        animation: fadeIn 1s ease-out;
      }
      
      .header {
        text-align: center;
        margin-bottom: 3rem; /* Increased from 1rem to 3rem */
      }
      
      .title {
        font-size: 3rem; /* Made even bigger for more prominent header appearance */
        font-weight: normal; /* Changed from bold to normal for pixel font */
        background: linear-gradient(to right, #60a5fa, #a855f7);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        margin: 0 0 0.5rem 0;
        letter-spacing: 2px; /* Increased letter spacing for better readability */
        animation: textGlow 2s infinite alternate ease-in-out, headerBounce 1.5s cubic-bezier(0.68, -0.55, 0.265, 1.55) both, floatPulse 3s ease-in-out infinite;
        text-transform: uppercase; /* Make it look more like a header */
        padding-bottom: 0.5rem; /* Add padding for better visual separation */
      }
      
      .subtitle {
        color: #d1d5db;
        margin: 0;
        font-size: 0.75rem; /* Reduced size for better fit */
        line-height: 1.4; /* Increased line height for better readability */
        animation: pixelFadeIn 1.5s steps(10, end) 0.3s both;
      }
      
      .card {
        background-color: rgba(31, 41, 55, 0.8);
        backdrop-filter: blur(10px);
        border-radius: 1rem;
        padding: 2.5rem;
        box-shadow: 0 0 15px rgba(100, 149, 237, 0.5);
        border: 1px solid rgba(100, 149, 237, 0.3);
        animation: cardEntrance 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) both;
      }
      
      .form-group {
        margin-bottom: 1.5rem;
      }
      
      .form-label {
        display: block;
        font-size: 0.75rem; /* Reduced size for better fit */
        font-weight: normal;
        color: #d1d5db;
        margin-bottom: 0.5rem;
        line-height: 1.4;
        animation: pixelFadeIn 1.5s steps(10, end) 0.5s both;
      }
      
      .form-input {
        display: block;
        width: 100%;
        padding: 0.75rem;
        background-color: #374151;
        border: 1px solid #4b5563;
        border-radius: 0.5rem;
        color: #ffffff;
        outline: none;
        font-size: 0.875rem; /* Adjusted size */
        box-sizing: border-box;
        font-family: 'Press Start 2P', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }
      
      .form-input:focus {
        border-color: #60a5fa;
        box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.5), 0 0 15px rgba(96, 165, 250, 0.7);
        animation: neonGlow 1.5s infinite alternate;
      }
      
      .button-container {
        position: relative;
        margin-top: 1.5rem;
      }
      
      .btn {
        border-radius: 9999px;
        background: linear-gradient(45deg, #4f46e5, #60a5fa, #a855f7);
        background-size: 200% 200%;
        padding: 0.75rem 1.5rem;
        font-weight: normal;
        color: #ffffff;
        transition: all 150ms cubic-bezier(0.4, 0, 0.2, 1);
        width: 100%;
        border: none;
        cursor: pointer;
        font-size: 0.875rem; /* Adjusted size */
        box-sizing: border-box;
        font-family: 'Press Start 2P', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        animation: gradientShift 3s ease infinite;
        box-shadow: 0 4px 15px rgba(79, 70, 229, 0.4);
      }
      
      .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(79, 70, 229, 0.6);
        animation: gradientShift 1s ease infinite, pulse 2s infinite ease-in-out;
      }
      
      .btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
        animation: none;
      }
      
      .message {
        margin-top: 1.5rem;
        text-align: center;
        padding: 0.75rem;
        border-radius: 0.5rem;
        display: none;
        font-size: 0.75rem; /* Reduced size */
        line-height: 1.4;
        animation: pixelFadeIn 0.5s steps(5, end) both;
      }
      
      .message.success {
        background-color: rgba(52, 211, 153, 0.2);
        color: #34d399;
        border: 1px solid rgba(52, 211, 153, 0.3);
        box-shadow: 0 0 10px rgba(52, 211, 153, 0.3);
      }
      
      .message.error {
        background-color: rgba(248, 113, 113, 0.2);
        color: #f87171;
        border: 1px solid rgba(248, 113, 113, 0.3);
        box-shadow: 0 0 10px rgba(248, 113, 113, 0.3);
      }
      
      .footer {
        text-align: center;
        color: #9ca3af;
        font-size: 0.75rem; /* Reduced size */
        margin-top: 2rem;
        padding-top: 1rem;
        border-top: 1px solid rgba(100, 149, 237, 0.2);
        line-height: 1.4;
        animation: pixelFadeIn 1.5s steps(10, end) 1.1s both;
      }
      
      /* Follow box styles */
      .follow-box {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        display: none;
      }
      
      .follow-content {
        background-color: rgba(31, 41, 55, 0.5); /* More transparent - reduced from 0.7 to 0.5 */
        backdrop-filter: blur(10px);
        border-radius: 1rem;
        padding: 2.5rem;
        box-shadow: 0 0 15px rgba(100, 149, 237, 0.5);
        border: 1px solid rgba(100, 149, 237, 0.3);
        animation: cardEntrance 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275) both;
        max-width: 32rem;
        width: 100%;
        text-align: center;
        font-family: 'Press Start 2P', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      }
      
      .follow-text {
        font-size: 0.75rem; /* Same as form labels */
        color: #d1d5db; /* Same as form labels */
        margin-bottom: 1.5rem;
        line-height: 1.4;
      }
      
      .follow-btn {
        border-radius: 0.5rem; /* Same as form inputs */
        background: linear-gradient(45deg, #4f46e5, #60a5fa, #a855f7);
        background-size: 200% 200%;
        padding: 0.75rem; /* Same as form inputs */
        font-weight: normal;
        color: #ffffff;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        width: 100%;
        border: none;
        cursor: pointer;
        font-size: 0.875rem;
        box-sizing: border-box;
        font-family: 'Press Start 2P', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        animation: gradientShift 3s ease infinite;
        box-shadow: 0 4px 15px rgba(79, 70, 229, 0.4);
      }
      
      .follow-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(79, 70, 229, 0.6);
        animation: gradientShift 1s ease infinite, pulse 2s infinite ease-in-out;
      }
      
      .close-btn {
        background: transparent;
        border: 1px solid #60a5fa;
        color: #60a5fa;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        cursor: pointer;
        font-family: 'Press Start 2P', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        font-size: 0.75rem;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: absolute;
        top: 10px;
        right: 10px;
      }
      
      .close-btn:hover {
        background-color: rgba(96, 165, 250, 0.2);
        transform: scale(1.1);
      }
      
      /* Fireball styles */
      /* This was a duplicate definition, removing it */
      
      /* Animations */
      @keyframes twinkle {
        0%, 100% { opacity: 0.2; transform: scale(1); }
        50% { opacity: 1; transform: scale(1.1); }
      }
      
      @keyframes pulse {
        0%, 100% { transform: scale(1); box-shadow: 0 0 30px #60a5fa, 0 0 60px #4f46e5; }
        50% { transform: scale(1.05); box-shadow: 0 0 40px #60a5fa, 0 0 80px #4f46e5; }
      }
      
      @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
      }
      
      @keyframes fireballMove {
        0% { 
          transform: translate(0, 0) scale(1);
          box-shadow: 0 0 20px #f97316, 0 0 40px #ea580c;
        }
        12.5% { 
          transform: translate(10vw, 10vh) scale(1.2);
          box-shadow: 0 0 30px #f97316, 0 0 60px #ea580c;
        }
        25% { 
          transform: translate(20vw, 20vh) scale(0.9);
          box-shadow: 0 0 25px #f97316, 0 0 50px #ea580c;
        }
        37.5% { 
          transform: translate(30vw, 30vh) scale(1.1);
          box-shadow: 0 0 35px #f97316, 0 0 70px #ea580c;
        }
        50% { 
          transform: translate(40vw, 40vh) scale(0.8);
          box-shadow: 0 0 20px #f97316, 0 0 40px #ea580c;
        }
        62.5% { 
          transform: translate(30vw, 50vh) scale(1.3);
          box-shadow: 0 0 40px #f97316, 0 0 80px #ea580c;
        }
        75% { 
          transform: translate(20vw, 40vh) scale(0.9);
          box-shadow: 0 0 25px #f97316, 0 0 50px #ea580c;
        }
        87.5% { 
          transform: translate(10vw, 30vh) scale(1.1);
          box-shadow: 0 0 35px #f97316, 0 0 70px #ea580c;
        }
        100% { 
          transform: translate(0, 20vh) scale(1);
          box-shadow: 0 0 20px #f97316, 0 0 40px #ea580c;
        }
      }
      

      
      @keyframes pixelFadeIn {
        0% { opacity: 0; }
        1% { opacity: 1; }
        50% { opacity: 1; }
        51% { opacity: 0; }
        100% { opacity: 1; }
      }
      
      @keyframes textGlow {
        0% { filter: drop-shadow(0 0 2px rgba(96, 165, 250, 0.5)); }
        100% { filter: drop-shadow(0 0 8px rgba(168, 85, 247, 0.8)); }
      }
      
      @keyframes neonGlow {
        0% { box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.5), 0 0 15px rgba(96, 165, 250, 0.7); }
        100% { box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.8), 0 0 25px rgba(96, 165, 250, 1); }
      }
      
      @keyframes gradientShift {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
      }
      
      @keyframes cardEntrance {
        0% { opacity: 0; transform: scale(0.8) translateY(30px); }
        100% { opacity: 1; transform: scale(1) translateY(0); }
      }
      
      @keyframes buttonEntrance {
        0% { opacity: 0; transform: scale(0.8); }
        100% { opacity: 1; transform: scale(1); }
      }
      
      @keyframes headerBounce {
        0% { 
          transform: scale(0.2) translateY(-50px);
          opacity: 0;
        }
        50% { 
          transform: scale(1.1) translateY(10px);
          opacity: 1;
        }
        70% { 
          transform: scale(0.9) translateY(0);
        }
        100% { 
          transform: scale(1) translateY(0);
          opacity: 1;
        }
      }
      
      @keyframes floatPulse {
        0% { 
          transform: translateY(0px); 
        }
        50% { 
          transform: translateY(-10px); 
        }
        100% { 
          transform: translateY(0px); 
        }
      }
      
      /* Adjust input prefix for pixel font */
      .input-prefix {
        font-size: 0.875rem;
        font-weight: normal;
      }
    </style>
  </head>
  <body>
    <!-- Loading Screen -->
    <LoadingScreen />
    
    <!-- Background elements container -->
    <div class="background-elements">
      <!-- Pre-created stars for more twinkling effect -->
      <div class="star" style="left: 5%; top: 5%; width: 2px; height: 2px;"></div>
      <div class="star" style="left: 10%; top: 15%; width: 3px; height: 3px;"></div>
      <div class="star" style="left: 15%; top: 8%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 20%; top: 25%; width: 2px; height: 2px;"></div>
      <div class="star" style="left: 25%; top: 12%; width: 3px; height: 3px;"></div>
      <div class="star" style="left: 30%; top: 30%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 35%; top: 18%; width: 2px; height: 2px;"></div>
      <div class="star" style="left: 40%; top: 35%; width: 3px; height: 3px;"></div>
      <div class="star" style="left: 45%; top: 22%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 50%; top: 40%; width: 2px; height: 2px;"></div>
      <div class="star" style="left: 55%; top: 28%; width: 3px; height: 3px;"></div>
      <div class="star" style="left: 60%; top: 45%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 65%; top: 32%; width: 2px; height: 2px;"></div>
      <div class="star" style="left: 70%; top: 50%; width: 3px; height: 3px;"></div>
      <div class="star" style="left: 75%; top: 38%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 80%; top: 55%; width: 2px; height: 2px;"></div>
      <div class="star" style="left: 85%; top: 42%; width: 3px; height: 3px;"></div>
      <div class="star" style="left: 90%; top: 60%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 95%; top: 48%; width: 2px; height: 2px;"></div>
      
      <!-- Additional stars for more density -->
      <div class="star" style="left: 8%; top: 50%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 12%; top: 60%; width: 2px; height: 2px;"></div>
      <div class="star" style="left: 18%; top: 55%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 22%; top: 70%; width: 3px; height: 3px;"></div>
      <div class="star" style="left: 28%; top: 65%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 32%; top: 75%; width: 2px; height: 2px;"></div>
      <div class="star" style="left: 38%; top: 70%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 42%; top: 80%; width: 3px; height: 3px;"></div>
      <div class="star" style="left: 48%; top: 75%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 52%; top: 85%; width: 2px; height: 2px;"></div>
      <div class="star" style="left: 58%; top: 80%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 62%; top: 90%; width: 3px; height: 3px;"></div>
      <div class="star" style="left: 68%; top: 85%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 72%; top: 95%; width: 2px; height: 2px;"></div>
      <div class="star" style="left: 78%; top: 90%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 82%; top: 95%; width: 3px; height: 3px;"></div>
      <div class="star" style="left: 88%; top: 90%; width: 1px; height: 1px;"></div>
      <div class="star" style="left: 92%; top: 95%; width: 2px; height: 2px;"></div>
      
      <!-- Pre-created planet for testing -->
      <div class="planet" style="left: 50%; top: 50%; margin-left: -40px; margin-top: -40px; width: 80px; height: 80px;"></div>
      
      <!-- Pre-created fireball for visibility -->
      <div class="fireball" style="left: 50%; top: 30%; width: 55px; height: 55px;"></div>
    </div>
    
    <div class="container">
      <div class="header">
        <h1 class="title">Kairos</h1>
        <p class="subtitle">The blockchain whispers secrets <span style="color: #60a5fa;">only the prescient can hear</span>.</p>
      </div>
      
      <div class="card">
        <form id="walletForm">
          <div class="form-group">
            <label for="twitterHandle" class="form-label">Twitter Handle</label>
            <input
              type="text"
              id="twitterHandle"
              name="twitterHandle"
              placeholder="@yourhandle"
              required
              class="form-input"
            />
          </div>
          
          <div class="form-group">
            <label for="walletAddress" class="form-label">EVM Wallet Address</label>
            <input
              type="text"
              id="walletAddress"
              name="walletAddress"
              placeholder="0x43. . . .  . .2D3ba"
              required
              class="form-input"
            />
          </div>
          
          <div class="button-container">
            <button
              type="submit"
              id="submitBtn"
              class="btn"
            >
              Submit
            </button>
          </div>
        </form>
        
        <div id="message" class="message"></div>
      </div>
      
      <div class="footer">
        <p>ⓒ 2025 Kairos. Powered by Hyperliquid.</p>
      </div>
    </div>
    
    <!-- Follow box that appears after submission -->
    <div id="followBox" class="follow-box">
      <div class="follow-content">
        <button id="closeFollowBox" class="close-btn">X</button>
        <div class="follow-text">
          <div>Thanks for submitted.</div>
          <div>Don't forget to follow our Twitter.</div>
        </div>
        <button id="followTwitterBtn" class="follow-btn">Kaito(X)</button>
      </div>
    </div>
    
        <script>
          // Worldwide wallet storage with Airtable
          class WorldwideWalletStorage {
            constructor() {
              this.airtableApiKey = 'patJWUUxDTbz0OfyR.cbe3794d10a83de0c78b578a04915cbadd5d7a6e0b8dad44c582c272dc0ad1aa';
              this.airtableBaseId = 'apprTT54N6yro3L44';
              this.airtableTableName = 'Table 1';
              this.storageKey = 'kairos-wallets';
            }

            async addWallet(twitterHandle, walletAddress) {
              try {
                // Try Airtable first
                const response = await fetch(`https://api.airtable.com/v0/${this.airtableBaseId}/${this.airtableTableName}`, {
                  method: 'POST',
                  headers: {
                    'Authorization': `Bearer ${this.airtableApiKey}`,
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify({
                    fields: {
                      'Twitter Handle': twitterHandle.trim(),
                      'Wallet Address': walletAddress.trim()
                    }
                  })
                });

                if (response.ok) {
                  const data = await response.json();
                  
                  // Also save to localStorage as backup
                  const localWallets = JSON.parse(localStorage.getItem(this.storageKey) || '[]');
                  localWallets.push({
                    id: data.id,
                    twitterHandle: twitterHandle.trim(),
                    walletAddress: walletAddress.trim(),
                    timestamp: data.createdTime
                  });
                  localStorage.setItem(this.storageKey, JSON.stringify(localWallets));
                  
                  return {
                    success: true,
                    message: 'Wallet added successfully to Airtable worldwide database!',
                    data: data
                  };
                } else {
                  // Fallback to localStorage
                  return this.addWalletLocal(twitterHandle, walletAddress);
                }

              } catch (error) {
                console.error('Airtable error:', error);
                // Fallback to localStorage
                return this.addWalletLocal(twitterHandle, walletAddress);
              }
            }

            async addWalletLocal(twitterHandle, walletAddress) {
              try {
                const localWallets = JSON.parse(localStorage.getItem(this.storageKey) || '[]');
                
                // Check if wallet already exists
                const exists = localWallets.some(w => 
                  w.walletAddress.toLowerCase() === walletAddress.toLowerCase()
                );
                
                if (exists) {
                  return {
                    success: false,
                    message: 'Wallet address already exists'
                  };
                }

                const newWallet = {
                  id: localWallets.length + 1,
                  twitterHandle: twitterHandle.trim(),
                  walletAddress: walletAddress.trim(),
                  timestamp: new Date().toISOString()
                };

                localWallets.push(newWallet);
                localStorage.setItem(this.storageKey, JSON.stringify(localWallets));
                
                return {
                  success: true,
                  message: 'Wallet saved locally (Airtable temporarily unavailable)',
                  data: newWallet
                };

              } catch (error) {
                console.error('Error adding wallet locally:', error);
                return {
                  success: false,
                  message: 'Failed to save wallet'
                };
              }
            }

            async getWallets() {
              try {
                // Try Airtable first
                const response = await fetch(`https://api.airtable.com/v0/${this.airtableBaseId}/${this.airtableTableName}?sort%5B0%5D%5Bfield%5D=Created&sort%5B0%5D%5Bdirection%5D=desc`, {
                  headers: {
                    'Authorization': `Bearer ${this.airtableApiKey}`
                  }
                });

                if (response.ok) {
                  const data = await response.json();
                  
                  // Format Airtable data
                  const formattedWallets = data.records.map(record => ({
                    id: record.id,
                    twitterHandle: record.fields['Twitter Handle'] || '',
                    walletAddress: record.fields['Wallet Address'] || '',
                    timestamp: record.fields['Created'] || record.createdTime
                  }));
                  
                  // Update localStorage with worldwide data
                  localStorage.setItem(this.storageKey, JSON.stringify(formattedWallets));
                  
                  return formattedWallets;
                } else {
                  throw new Error('Airtable unavailable');
                }

              } catch (error) {
                console.error('Airtable error:', error);
                
                // Fallback to localStorage
                const localWallets = localStorage.getItem(this.storageKey);
                if (localWallets) {
                  return JSON.parse(localWallets);
                }

                // Initialize with sample data
                const sampleWallets = [
                  {
                    id: 1,
                    twitterHandle: '@rrt',
                    walletAddress: '0xDc58817d88F6f353eb7D54cd0FA6F438B2c0814e',
                    timestamp: new Date().toISOString()
                  },
                  {
                    id: 2,
                    twitterHandle: '@rr',
                    walletAddress: '0x7DC58DBac9A94291A814b5A5D0180489bD697683',
                    timestamp: new Date().toISOString()
                  }
                ];
                
                localStorage.setItem(this.storageKey, JSON.stringify(sampleWallets));
                return sampleWallets;
              }
            }
          }

          const worldwideStorage = new WorldwideWalletStorage();

      // Handle wallet provider conflicts
      window.addEventListener('load', function() {
        if (typeof window.ethereum !== 'undefined') {
          console.log('Ethereum provider detected:', window.ethereum);
        }
      });
      
              // Show follow box after form submission
              document.getElementById('walletForm').addEventListener('submit', async function(e) {
                e.preventDefault(); // Prevent default form submission
                
                // Get form values
                const twitterHandle = document.getElementById('twitterHandle').value;
                const walletAddress = document.getElementById('walletAddress').value;
                
                // Basic validation
                if (!twitterHandle || !walletAddress) {
                  return;
                }

                // More flexible wallet address validation
                const trimmedWalletAddress = walletAddress.trim();
                if (!trimmedWalletAddress.startsWith('0x') || trimmedWalletAddress.length < 42 || trimmedWalletAddress.length > 44) {
                  const messageDiv = document.getElementById('message');
                  messageDiv.textContent = `Invalid wallet address format. Expected: 0x followed by 40 characters. Got: ${trimmedWalletAddress.length} characters`;
                  messageDiv.className = 'message error';
                  messageDiv.style.display = 'block';
                  return;
                }

                // Show loading state
                const submitBtn = document.querySelector('#walletForm button[type="submit"]');
                const originalText = submitBtn.textContent;
                submitBtn.textContent = 'Submitting...';
                submitBtn.disabled = true;
                
            try {
              // Add wallet to worldwide database
              const result = await worldwideStorage.addWallet(twitterHandle.trim(), trimmedWalletAddress);

                  if (result.success) {
                    // Clear the form fields
                    document.getElementById('twitterHandle').value = '';
                    document.getElementById('walletAddress').value = '';
                    
                    // Show success message
                    const messageDiv = document.getElementById('message');
                    messageDiv.textContent = 'Wallet submitted successfully!';
                    messageDiv.className = 'message success';
                    messageDiv.style.display = 'block';
                    
                    // Show follow box after a short delay
                    setTimeout(function() {
                      document.getElementById('followBox').style.display = 'flex';
                    }, 1000);
                  } else {
                    // Show error message
                    const messageDiv = document.getElementById('message');
                    messageDiv.textContent = result.message || 'Submission failed';
                    messageDiv.className = 'message error';
                    messageDiv.style.display = 'block';
                  }
                } catch (error) {
                  console.error('Submission error:', error);
                  const messageDiv = document.getElementById('message');
                  messageDiv.textContent = 'Network error. Please try again.';
                  messageDiv.className = 'message error';
                  messageDiv.style.display = 'block';
                } finally {
                  // Reset button state
                  submitBtn.textContent = originalText;
                  submitBtn.disabled = false;
                }
              });
      
      // Close follow box when X button is clicked
      document.getElementById('closeFollowBox').addEventListener('click', function() {
        document.getElementById('followBox').style.display = 'none';
      });
      
      // Handle follow Twitter button click
      document.getElementById('followTwitterBtn').addEventListener('click', function() {
        window.open('https://x.com/kaito_official', '_blank');
        document.getElementById('followBox').style.display = 'none';
      });
      
      // Create floating stars
      function createStars() {
        console.log('Creating stars...');
        const container = document.querySelector('.background-elements');
        if (!container) {
          console.log('Background elements container not found');
          return;
        }
        
        const starCount = 20;
        
        for (let i = 0; i < starCount; i++) {
          const star = document.createElement('div');
          star.className = 'star';
          star.style.left = `${Math.random() * 100}%`;
          star.style.top = `${Math.random() * 100}%`;
          star.style.width = `${Math.random() * 3 + 1}px`;
          star.style.height = star.style.width;
          star.style.animationDelay = `${Math.random() * 2}s`;
          container.appendChild(star);
        }
      }
      
      // Create pulsating planet
      function createPlanet() {
        console.log('Creating planet...');
        const container = document.querySelector('.background-elements');
        if (!container) {
          console.log('Background elements container not found');
          return;
        }
        
        const planet = document.createElement('div');
        planet.className = 'planet';
        planet.style.width = '80px';
        planet.style.height = '80px';
        planet.style.left = '10%';
        planet.style.top = '10%';
        container.appendChild(planet);
      }
      
      // Create bouncing fireballs
      function createFireballs() {
        console.log('Creating fireballs...');
        const container = document.querySelector('.background-elements');
        if (!container) {
          console.log('Background elements container not found');
          return;
        }
        
        // Only create 1 fireball as requested
        const fireball = document.createElement('div');
        fireball.className = 'fireball';
        
        // Random size between 40px and 80px
        const size = Math.random() * 40 + 40;
        fireball.style.width = `${size}px`;
        fireball.style.height = `${size}px`;
        
        // Random starting position within safe bounds (20% to 60%)
        fireball.style.left = `${Math.random() * 40 + 20}%`;
        fireball.style.top = `${Math.random() * 40 + 20}%`;
        
        // Random animation duration between 20s and 30s (even slower movement)
        const duration = Math.random() * 10 + 20;
        fireball.style.animationDuration = `${duration}s`;
        
        // Random animation delay
        fireball.style.animationDelay = `${Math.random() * 5}s`;
        
        container.appendChild(fireball);
      }
      
      // Initialize background elements
      document.addEventListener('DOMContentLoaded', function() {
        setTimeout(function() {
          createStars();
          createPlanet();
          createFireballs(); // Create fireballs
        }, 100);
      });
    </script>
  </body>
</html>